#!/bin/bash
set -eu

die() { echo "$@" >&2; exit 1; }

usage() {
	cat <<EOF
Usage: ${0##*/} [-n | --dry-run] [(-m | --name) <prefix>] [-c | --checkout] <changeset>...
       ${0##*/} {-h | --help}
Fetches Gerrit changesets into local branches.

Options:
   -n, --dry-run
       Show the names of branches but do not create them.

   -m <prefix>, --name <prefix>
       Append given prefix to the branch name.
       Usual branch name format is "c/<change>/<patchset>".
       With '-m' option it will be "<prefix>.c/<change>/<patchset>".
       This lets you add mnemonics to otherwise opaque numerical ids.
       ("What was the topic of c/7971/2? And of c/7987/1?
        I wish I remembered.")

   -c, --checkout
       Fetch a changeset and switch into the newly created branch.

Changeset format:
   CHANGE            the last patch set of the change
   CHANGE/PATCHSET   specific patch set of the change
   CHANGE/           all patch sets of the change

Examples:
   # Fetch patch set 3 of change 5942 into local branch 'c/5942/3'.
   ${0##*/} 5942/3

   # Fetch the latest patch set (2) of change 7976 into local branch
   # 'spiel-st.c/7976/2' and switch to it.
   ${0##*/} -m spiel-st -c 7976

Set \`REMOTE' environment variable to specify git remote ('origin' by default).
EOF
}

err() {
	echo "$@" >&2
	echo "Type \`${0##*/} -h' for usage." >&2
	exit 1
}

REMOTE="${REMOTE:-origin}"
DRY_RUN=0
PREFIX=
CHECKOUT=0

while [ $# -gt 0 ]; do
	case "$1" in
		''|'-h'|'--help'|'-help') usage; exit;;
		'-n'|'--dry-run') DRY_RUN=1; shift;;
		'-m'|'--name')
			[ $# -gt 1 ] || err "'$1' requires an argument."
			shift
			PREFIX="$1."
			shift;;
		'-c'|'--checkout') CHECKOUT=1; shift;;
		*) break;;
	esac
done
[ $# -gt 0 ] || err 'Missing changeset specification'

last2() { echo -n "$1" | tail -c2; }
fetch() { [ $DRY_RUN -eq 1 ] || git fetch "$REMOTE" $1; }

branch() {
	local branchname="${PREFIX}$1"

	if [ $DRY_RUN -eq 1 ]; then
		echo -n "Would create branch '$branchname'"
		[ $CHECKOUT -eq 1 ] && echo ' and switch into it' || echo
	elif [ $CHECKOUT -eq 1 ]; then
		git checkout -b $branchname FETCH_HEAD
	else
		git branch $branchname FETCH_HEAD
		echo "Created branch '$branchname'"
	fi
}

while [ $# -gt 0 ]; do
	CHANGESET="$1"
	shift
	CHANGE="${CHANGESET%/*}"

	echo "$CHANGESET" | grep -qE '^[0-9]+(/([0-9]*))?$' ||
		die "Invalid argument: $CHANGESET"
	if echo "$CHANGESET" | grep -q /; then
		PATCHSET="${CHANGESET#*/}"
		if [ -n "$PATCHSET" ]; then
			# Specific patch set.
			fetch refs/changes/$(last2 $CHANGE)/$CHANGESET
			branch c/$CHANGESET
			continue
		fi
		# All patch sets.
		filter() { cat; }
	else
		# The last patch set.
		filter() { tail -1; }
	fi
	git ls-remote "$REMOTE" | awk '/\/changes\// {print $2}' |
		grep /$(last2 $CHANGE)/$CHANGE/ | sort -t/ -k5 -n | filter |
		while read REF; do
			fetch $REF
			branch $(echo $REF | sed 's:refs/changes/..:c:')
		done
done
